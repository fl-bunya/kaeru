import cheerio from "https://esm.sh/cheerio@1.0.0-rc.10";

interface RouteInfo {
  departureTime: string;
  arrivalTime: string;
  duration: string;
  transfers: string;
  fare: string;
  route: string[];
}

async function getCurrentTimeParams(): Promise<{ y: string; m: string; d: string; hh: string; m1: string; m2: string }> {
  const now = new Date();
  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, '0');
  const day = String(now.getDate()).padStart(2, '0');
  const hour = String(now.getHours()).padStart(2, '0');
  const minute = String(now.getMinutes()).padStart(2, '0');
  
  return {
    y: String(year),
    m: month,
    d: day,
    hh: hour,
    m1: minute[0],
    m2: minute[1]
  };
}

function buildYahooTransitURL(timeParams: any): string {
  const baseURL = 'https://transit.yahoo.co.jp/search/result';
  const params = new URLSearchParams({
    from: 'Êñ∞ÂØåÁî∫(Êù±‰∫¨ÈÉΩ)',
    to: '‰∏äÁ¶èÂ≤°',
    fromgid: '',
    togid: '',
    flatlon: '',
    tlatlon: '',
    ...timeParams,
    type: '1',
    ticket: 'ic',
    expkind: '1',
    userpass: '1',
    ws: '3',
    s: '2',
    al: '0',
    shin: '0',
    ex: '0',
    hb: '1',
    lb: '1',
    sr: '1'
  });
  
  return `${baseURL}?${params.toString()}`;
}

async function fetchTransitRoutes(): Promise<RouteInfo[]> {
  try {
    const timeParams = await getCurrentTimeParams();
    const url = buildYahooTransitURL(timeParams);
    
    console.log(`Fetching transit routes from: ${url}`);
    
    const response = await fetch(url);
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    const html = await response.text();
    const $ = cheerio.load(html);
    
    const routes: RouteInfo[] = [];
    
    // ÂÆüÈöõ„ÅÆYahoo‰πóÊèõÊ°àÂÜÖ„Éö„Éº„Ç∏„ÅÆÊßãÈÄ†„Å´Âêà„Çè„Åõ„Å¶„Çª„É¨„ÇØ„Çø„ÇíË™øÊï¥
    $('.routeDetail').slice(0, 3).each((index: number, element: any) => {
      const $route = $(element);
      
      // Áô∫ËªäÊôÇÂàª„Å®Âà∞ÁùÄÊôÇÂàªÔºàÂÆüÈöõ„ÅÆHTMLÊßãÈÄ†„Å´Âü∫„Å•„ÅÑ„Å¶Ë™øÊï¥Ôºâ
      const departureTime = $route.find('.time_departure, .departureTime, .time').first().text().trim();
      const arrivalTime = $route.find('.time_arrival, .arrivalTime, .time').last().text().trim();
      
      // ÊâÄË¶ÅÊôÇÈñì
      const duration = $route.find('.time_required, .duration, .timeInfo').text().trim();
      
      // ‰πóÊèõÂõûÊï∞
      const transfers = $route.find('.transfer_count, .transfers, .transfer').text().trim();
      
      // ÈÅãË≥É
      const fare = $route.find('.fare, .price, .cost').text().trim();
      
      // „É´„Éº„ÉàË©≥Á¥∞
      const routeDetails: string[] = [];
      $route.find('.route_detail, .routeDetail, .transport, .line').each((_: number, detail: any) => {
        const text = $(detail).text().trim();
        if (text) {
          routeDetails.push(text);
        }
      });
      
      routes.push({
        departureTime,
        arrivalTime,
        duration,
        transfers,
        fare,
        route: routeDetails
      });
    });
    
    return routes;
  } catch (error) {
    console.error('Error fetching transit routes:', error);
    return [];
  }
}

async function main() {
  console.log('üöá Yahoo‰πóÊèõÊ°àÂÜÖ„Åã„Çâ„É´„Éº„ÉàÊÉÖÂ†±„ÇíÂèñÂæó‰∏≠...');
  
  const routes = await fetchTransitRoutes();
  
  if (routes.length === 0) {
    console.log('‚ùå „É´„Éº„ÉàÊÉÖÂ†±„ÇíÂèñÂæó„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü');
    return;
  }
  
  console.log(`\nüìã ÂèñÂæó„Åó„Åü„É´„Éº„ÉàÊÉÖÂ†± (${routes.length}‰ª∂):\n`);
  
  routes.forEach((route, index) => {
    console.log(`=== „É´„Éº„Éà ${index + 1} ===`);
    console.log(`Áô∫ËªäÊôÇÂàª: ${route.departureTime || 'N/A'}`);
    console.log(`Âà∞ÁùÄÊôÇÂàª: ${route.arrivalTime || 'N/A'}`);
    console.log(`„É´„Éº„Éà: ${route.route.length > 0 ? route.route.join(' ‚Üí ') : 'N/A'}`);
    console.log('');
  });
}

main().catch(console.error); 